#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{xmpmulti}
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Problema del 
\begin_inset Quotes fld
\end_inset

ordenamiento de elementos
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Author
Leonardo Flórez-Valencia
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
En este documento se presenta el problema del ordenamiento de elementos:
 análisis, diseño y algunos algoritmos, que son ampliamente conocidos en
 la literatura, que lo solucionan.
\end_layout

\begin_layout Part
Análisis y diseño del problema
\end_layout

\begin_layout Section
Análisis
\end_layout

\begin_layout Standard
El problema, informalmente, se puede describir como: ordenar/organizar una
 lista/vector/arreglo de números.
 Genéricamente, no se puede hablar de listas, vectores o arreglos porque
 estas son estructuras de datos reales que pueden (o no) existir fácilmente
 en un lenguaje de programación (por ejemplo, piense en la forma de implementar
 un vector o una lista en lenguaje ensamblador); entonces, se habla de secuencia
s de números:
\begin_inset Formula 
\[
S=\left\langle s_{1},s_{2},\cdots,s_{n}\right\rangle =\left\langle s_{i}\in\mathbb{Z}\land1\le i\le n\right\rangle 
\]

\end_inset

donde 
\begin_inset Formula $n$
\end_inset

 es la cardinalidad (i.e.
 cantidad de elementos) de la secuencia e 
\begin_inset Formula $i$
\end_inset

 es el índice de cada elemento (note que el primer índice es 1 y no 0).
\end_layout

\begin_layout Standard
Varias preguntas pueden surgir acá:
\end_layout

\begin_layout Itemize
¿Únicamente se pueden ordenar números enteros (
\begin_inset Formula $\mathbb{Z}$
\end_inset

)?
\end_layout

\begin_layout Itemize
¿Qué 
\begin_inset Quotes fld
\end_inset

criterio
\begin_inset Quotes frd
\end_inset

 existe para decir que una secuencia está ordenada?
\end_layout

\begin_layout Itemize
¿Se puede usar este 
\begin_inset Quotes fld
\end_inset

criterio
\begin_inset Quotes frd
\end_inset

 para ordenar una secuencia?
\end_layout

\begin_layout Standard
Resulta obvio que los números enteros no son los únicos ordenables: al menos
 los naturales (
\begin_inset Formula $\mathbb{N}$
\end_inset

), quebrados (
\begin_inset Formula $\mathbb{Q}$
\end_inset

), reales (
\begin_inset Formula $\mathbb{R}$
\end_inset

) e imaginarios (
\begin_inset Formula $\mathbb{I}$
\end_inset

) son intuitivamente ordenables.
 Pero, se puede pensar en otros elementos que pueden ser ordenables: palabras
 (para editar diccionarios, por ejemplo), frutas (por su tamaño), animales
 (por su nombre, su género o su número de dientes, por poner algunos ejemplos).
 Entonces, si nos enteros no son los únicos elementos ordenables, nuestra
 definición de secuencia para este problema debe cambiar un poco:
\begin_inset Formula 
\[
S=\left\langle s_{i}\in\mathbb{T}\land1\le i\le n\right\rangle 
\]

\end_inset

donde 
\begin_inset Formula $\mathbb{T}$
\end_inset

 es un conjunto de elementos que pueden ser ordenables.
\end_layout

\begin_layout Standard
Ahora, ¿qué quiere decir que unos elementos sean ordenables? Es decir, ¿cuál
 es el 
\begin_inset Quotes fld
\end_inset

criterio
\begin_inset Quotes frd
\end_inset

 de ordenamiento? Intuitivamente, sabemos que dados dos números podemos
 saber quién va primero y quién va después, para esto existe el símbolo
 
\begin_inset Formula $\le$
\end_inset

; que, formalmente, expresa una relación de orden parcial entre elementos.
 Entonces, si en el conjunto 
\begin_inset Formula $\mathbb{T}$
\end_inset

 podemos definir una relación de orden parcial 
\begin_inset Formula $\le$
\end_inset

, un algoritmo de ordenamiento debe generar una permutación 
\begin_inset Formula $S'$
\end_inset

, a partir de 
\begin_inset Formula $S$
\end_inset

, que cumpla con la condiciones:
\begin_inset Formula 
\[
S'=\left\langle s'_{i}\in S\land s'_{i-1}\le s'_{i}\forall1<i\land1\le i\le n\right\rangle 
\]

\end_inset

es decir, que la relación de orden parcial 
\begin_inset Formula $\le$
\end_inset

 se cumpla entre elementos adyacentes de la secuencia permutada.
 Debe notarse que la única condición para que se pueda crear la permutación
 es que la relación de orden parcial 
\begin_inset Formula $\le$
\end_inset

 este definida en 
\begin_inset Formula $\mathbb{T}$
\end_inset

.
 Recordemos que una relación de orden parcial debe cumplir con las propiedades:
\end_layout

\begin_layout Itemize
Reflexividad: 
\begin_inset Formula $a\le a$
\end_inset

.
\end_layout

\begin_layout Itemize
Antisimetría: si 
\begin_inset Formula $a\le b$
\end_inset

 y 
\begin_inset Formula $b\le a$
\end_inset

, entonces 
\begin_inset Formula $a=b$
\end_inset

.
\end_layout

\begin_layout Itemize
Transitividad: si 
\begin_inset Formula $a\le b$
\end_inset

 y 
\begin_inset Formula $b\le c$
\end_inset

, entonces 
\begin_inset Formula $a\le c$
\end_inset

.
\end_layout

\begin_layout Section
Diseño
\end_layout

\begin_layout Standard
Con las observaciones presentadas en el análisis anterior, podemos escribir
 el diseño de un algoritmo que solucione el problema de ordenamiento.
 A veces este diseño se conoce como el 
\begin_inset Quotes fld
\end_inset

contrato
\begin_inset Quotes frd
\end_inset

 del algoritmmos o las 
\begin_inset Quotes fld
\end_inset

precondiciones
\begin_inset Quotes frd
\end_inset

 y 
\begin_inset Quotes fld
\end_inset

poscondiciones
\begin_inset Quotes frd
\end_inset

 del algoritmo.
 El diseño se compone de entradas y salidas:
\end_layout

\begin_layout Enumerate

\series bold
Entradas
\series default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
Una secuencia 
\begin_inset Formula $S=\left\langle s_{i}\in\mathbb{T}\land1\le i\le n\right\rangle $
\end_inset

 de 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

 elementos que pertenecen a un conjunto 
\begin_inset Formula $\mathbb{T}$
\end_inset

.
 En este conjunto debe estar definida la relación de orden parcial 
\begin_inset Formula $\le$
\end_inset

; o la relaciones de transitividad 
\begin_inset Formula $<$
\end_inset

 y de equivalencia 
\begin_inset Formula $=$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Salidas
\series default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
Una permutacion ordenada 
\begin_inset Formula $S'=\left\langle s'_{i}\in S\land s'_{i-1}\le s'_{i}\forall1<i\land1\le i\le n\right\rangle $
\end_inset

 de la secuencia de entrada 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Part
Algoritmos
\end_layout

\begin_layout Section
Permutativo
\end_layout

\begin_layout Subsection
Algoritmo
\end_layout

\begin_layout Standard
Este algoritmo se basa en la idea de calcular todas las permutaciones posibles
 de la secuencia; cuando una permutación ordenada es encontrada, el algoritmo
 para.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure{PermutativeSort}{
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S'\leftarrow S$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
While{
\end_layout

\end_inset


\begin_inset Formula $\lnot\text{\textsc{IsSorted}}\left(S'\right)$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S'\leftarrow\text{\textsc{NextPermutation}}\left(S\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndWhile
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\backslash
Return{
\end_layout

\end_inset


\begin_inset Formula $S'$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ordenamiento permutativo.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este algoritmo necesita de dos algoritmos auxiliares:
\end_layout

\begin_layout Itemize

\noun on
IsSorted
\noun default
, que verifica si una secuencia sigue la relación de orden parcial 
\begin_inset Formula $\le$
\end_inset

.
\end_layout

\begin_layout Itemize

\noun on
NextPermutation
\noun default
, que calcula la siguiente permutación de 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Ahora se escribe el algoritmo 
\noun on
IsSorted
\noun default
 (
\noun on
NextPermutation 
\noun default
se deja como ejercicio):
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure{IsSorted}{
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $isOrdered\leftarrow true$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
While{
\end_layout

\end_inset


\begin_inset Formula $isOrdered\land i<\left|S\right|$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $isOrdered\leftarrow s_{i}\le s_{i+1}\land isOrdered$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow i+1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndWhile
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\backslash
Return{
\end_layout

\end_inset


\begin_inset Formula $isOrdered$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Algoritmo que informa si una secuencia está ordenada.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Complejidad
\end_layout

\begin_layout Standard
El algoritmo 
\noun on
IsSorted
\noun default
 tiene órdenes de complejidad 
\begin_inset Formula $O\left(\left|S\right|\right)$
\end_inset

 y 
\begin_inset Formula $\Omega\left(1\right)$
\end_inset

 (¿por qué?).
 Ambos órdenes son calculados por inspección de código.
\end_layout

\begin_layout Standard
Como este algoritmo es usado dentro del esquema permutativo del algoritmo
 
\noun on
PermutativeSort
\noun default
, éste tiene ordenes de complejidad 
\begin_inset Formula $O\left(\left|S\right|!\left|S\right|\right)$
\end_inset

 y 
\begin_inset Formula $\Omega\left(\left|S\right|!\right)$
\end_inset

, también calculados por inspección de código.
\end_layout

\begin_layout Subsection
Invariante
\end_layout

\begin_layout Subsubsection
IsSorted
\end_layout

\begin_layout Standard
La bandera de control 
\family typewriter
isOrdered
\family default
 indica si la secuencia 
\begin_inset Formula $S_{1\rightarrow i}$
\end_inset

 (la secuencia desde 1 hasta i) sigue la relacion de orden parcial 
\begin_inset Formula $\le$
\end_inset

.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Inicio
\series default
\bar default
: la secuencia vacia 
\begin_inset Formula $S_{1\rightarrow0}=\emptyset$
\end_inset

 está ordenada.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Avance
\series default
\bar default
: si la secuencia 
\begin_inset Formula $S_{1\rightarrow i}$
\end_inset

 está ordenada, se verifica la relacion entre 
\begin_inset Formula $S_{i}$
\end_inset

 y 
\begin_inset Formula $S_{i+1}$
\end_inset

 y se modifica 
\family typewriter
isOrdered
\family default
 de acuerdo.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Terminación
\series default
\bar default
: si la secuencia 
\begin_inset Formula $S_{i\rightarrow n}$
\end_inset

 está ordenada, 
\family typewriter
isOrdered
\family default
 nunca dejo de ser 
\begin_inset Quotes fld
\end_inset


\family typewriter
true
\family default

\begin_inset Quotes frd
\end_inset

; si alguna pareja de elementos adyacentes no sigue la relacion, 
\family typewriter
isOrdered
\family default
 cambio su estado a 
\begin_inset Quotes fld
\end_inset


\family typewriter
false
\family default

\begin_inset Quotes frd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
PermutativeSort
\end_layout

\begin_layout Standard
\begin_inset Formula $S'$
\end_inset

 contiene una permutación ordenada de 
\begin_inset Formula $S$
\end_inset

.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Inicio
\series default
\bar default
: 
\begin_inset Formula $S$
\end_inset

 puede que esté ordenada.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Avance
\series default
\bar default
: Si 
\begin_inset Formula $S^{(i)'}$
\end_inset

 (la i-ésima permutación) está ordenada termine, avance a la siguiente permutaci
ón en caso contrario.
 
\end_layout

\begin_layout Itemize

\series bold
\bar under
Terminación
\series default
\bar default
: 
\begin_inset Formula $S'$
\end_inset

 tiene el valor de una permutación ordenada (ejercicio de reflexión personal:
 ¿se puede demostrar que una secuencia siempre tendrá una permutación ordenada?).
 
\end_layout

\begin_layout Subsection
Notas de implementación
\end_layout

\begin_layout Standard
Este algoritmo necesita de una forma de representación de secuencias que
 permita la implementación de un algoritmo permutativo.
 Hoy en día, la mayoría de lenguajes ofrecen librerías para hacer este tipo
 de iteraciones permutativas.
 La mayoría de ellas funciona sobre contenedores lineales de acceso aleatorio
 (arreglos).
\end_layout

\begin_layout Section
Burbuja
\end_layout

\begin_layout Subsection
Algoritmo
\end_layout

\begin_layout Standard
Este algoritmo se basa en la idea: en una iteración completa sobre la secuencia,
 se puede hacer que los elementos más grandes 
\begin_inset Quotes fld
\end_inset

floten
\begin_inset Quotes frd
\end_inset

 hasta las últimas posiciones de la secuencia.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure{
\end_layout

\end_inset

BubbleSort
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
For{
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow1$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $\left|S\right|$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
For{
\end_layout

\end_inset


\begin_inset Formula $j\leftarrow1$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $\left|S\right|-i$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

      
\backslash
If{
\end_layout

\end_inset


\begin_inset Formula $S\left[j+1\right]<S\left[j\right]$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

        
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $aux\leftarrow S\left[j\right]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

        
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S\left[j\right]\leftarrow S\left[j+1\right]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

        
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S\left[j+1\right]\leftarrow aux$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

      
\backslash
EndIf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Ordenamiento burbuja
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Complejidad
\end_layout

\begin_layout Standard
El algoritmo tiene orden de complejidad 
\begin_inset Formula $O\left(\left|S\right|^{2}\right)$
\end_inset

.
 El cálculo se hace por inspección de código.
\end_layout

\begin_layout Subsection
Invariante
\end_layout

\begin_layout Subsection
Notas de implementación
\end_layout

\begin_layout Section
Inserción
\end_layout

\begin_layout Subsection
Algoritmo
\end_layout

\begin_layout Standard
Este algoritmo se basa en la idea: en cada iteración, mantener ordenados
 los elementos hasta esa posición.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure{
\end_layout

\end_inset

InsertionSort
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
For{
\end_layout

\end_inset


\begin_inset Formula $j\leftarrow2$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $\left|\mathcal{S}\right|$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $k\leftarrow\mathcal{S}\left[j\right]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow j-1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
While{
\end_layout

\end_inset


\begin_inset Formula $0<i\land k<\mathcal{S}\left[i\right]$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

      
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $\mathcal{S}\left[i+1\right]\leftarrow\mathcal{S}\left[i\right]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

      
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow i-1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
EndWhile
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $\mathcal{S}\left[i+1\right]\leftarrow k$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Ordenamiento por inserción
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Complejidad
\end_layout

\begin_layout Standard
El algoritmo tiene orden de complejidad 
\begin_inset Formula $O\left(\left|S\right|^{2}\right)$
\end_inset

.
 El cálculo se hace por inspección de código.
\end_layout

\begin_layout Subsection
Invariante
\end_layout

\begin_layout Subsection
Notas de implementación
\end_layout

\begin_layout Part
Comparación de los algoritmos
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/leonardo/Dropbox/courses/PUJ/analisis_algoritmos/sesiones/01_notacion_asintotica/code/data/00_simple_data_cxx.png
	lyxscale 20
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pocos datos
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/leonardo/Dropbox/courses/PUJ/analisis_algoritmos/sesiones/01_notacion_asintotica/code/data/01_simple_data_cxx.png
	lyxscale 20
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Muchos datos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Algoritmos en C++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/leonardo/Dropbox/courses/PUJ/analisis_algoritmos/sesiones/01_notacion_asintotica/code/data/00_simple_data_python.png
	lyxscale 20
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pocos datos
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/leonardo/Dropbox/courses/PUJ/analisis_algoritmos/sesiones/01_notacion_asintotica/code/data/01_simple_data_python.png
	lyxscale 20
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Muchos datos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Algoritmos en Python
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
